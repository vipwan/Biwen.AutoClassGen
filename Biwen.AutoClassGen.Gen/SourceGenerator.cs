using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;

namespace Biwen.AutoClassGen
{

    [Generator(LanguageNames.CSharp)]
#pragma warning disable RS1036 // 指定分析器禁止的 API 强制设置
    public class SourceGenerator : IIncrementalGenerator
#pragma warning restore RS1036 // 指定分析器禁止的 API 强制设置
    {

        const string AttributeMetadataName = "Biwen.AutoClassGen.Attributes.AutoGenAttribute";
        const string AttributeValueMetadataName = "AutoGen";

        const string AttributeMetadataName_Dto = "Biwen.AutoClassGen.Attributes.AutoDtoAttribute";
        const string AttributeValueMetadataName_Dto = "AutoDto";



        public void Initialize(IncrementalGeneratorInitializationContext context)
        {


            #region AutoGenAttribute


            var nodes = context.SyntaxProvider.ForAttributeWithMetadataName(
              AttributeMetadataName,
              (context, attributeSyntax) => true,
              (syntaxContext, _) => syntaxContext.TargetNode).Collect();

            IncrementalValueProvider<(Compilation, ImmutableArray<SyntaxNode>)> compilationAndTypes =
                context.CompilationProvider.Combine(nodes);

            context.RegisterSourceOutput(compilationAndTypes, static (spc, source) => HandleAnnotatedNodes(source.Item1, source.Item2, spc));

            #endregion

            #region AutoDtoAttribute

            var nodesDto = context.SyntaxProvider.ForAttributeWithMetadataName(
                AttributeMetadataName_Dto,
                (context, attributeSyntax) => true,
                (syntaxContext, _) => syntaxContext.TargetNode).Collect();

            IncrementalValueProvider<(Compilation, ImmutableArray<SyntaxNode>)> compilationAndTypesDto =
                context.CompilationProvider.Combine(nodesDto);

            context.RegisterSourceOutput(compilationAndTypesDto, static (spc, source) => HandleAnnotatedNodesDto(source.Item1, source.Item2, spc));

            #endregion
        }


        /// <summary>
        /// Gen AutoGenAttribute
        /// </summary>
        /// <param name="compilation"></param>
        /// <param name="nodes"></param>
        /// <param name="context"></param>
        private static void HandleAnnotatedNodes(Compilation compilation, ImmutableArray<SyntaxNode> nodes, SourceProductionContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// author:vipwan@outlook.com 万雅虎");
            sb.AppendLine("// issue:https://github.com/vipwan/Biwen.AutoClassGen/issues");
            sb.AppendLine("// 如果你在使用中遇到问题,请第一时间issue,谢谢!");
            sb.AppendLine("// This file is generated by Biwen.AutoClassGen.SourceGenerator");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Text;");
            sb.AppendLine("using System.Threading.Tasks;");

            sb.AppendLine();
            sb.AppendLine("$namespace");
            sb.AppendLine();

            sb.AppendLine("#pragma warning disable");
            sb.AppendLine("namespace $ni");
            sb.AppendLine("{");
            sb.AppendLine("$classes");
            sb.AppendLine("}");
            sb.AppendLine("#pragma warning restore");

            string classTemp = $"public partial class $className : $interfaceName {{ $body }}";

            foreach (InterfaceDeclarationSyntax node in nodes.AsEnumerable().Cast<InterfaceDeclarationSyntax>())
            {

                if (node.BaseList == null || !node.BaseList.Types.Any())
                {
                    //当前使用分析器SourceGenAnalyzer

                    // issue error 
                    //context.ReportDiagnostic(Diagnostic.Create(InvalidDeclareError, node.GetLocation()));
                    continue;
                }

                //var attributes = (node.AttributeLists.AsEnumerable().First(
                //    x => x.Attributes.Any(x => x.Name.ToFullString() == AttributeValueMetadataName))
                //    as AttributeListSyntax).Attributes;

                List<AttributeSyntax> attributeSyntaxes = [];
                foreach (var attr in node.AttributeLists.AsEnumerable())
                {
                    var attrName = attr.Attributes.FirstOrDefault()?.Name.ToString();
                    if (attrName == AttributeValueMetadataName)
                    {
                        attributeSyntaxes.Add(attr.Attributes.First(x => x.Name.ToString() == AttributeValueMetadataName));
                    }
                }
                if (attributeSyntaxes.Count == 0)
                {
                    continue;
                }

                foreach (var attribute in attributeSyntaxes)
                {
                    var className = attribute.ArgumentList!.Arguments[0].ToString();
                    var rootNamespace = attribute.ArgumentList!.Arguments[1].ToString();

                    StringBuilder bodyBuilder = new();
                    List<string> namespaces = [];
                    StringBuilder bodyInnerBuilder = new();

                    //每个接口生成属性
                    void genProperty(TypeSyntax @interfaceType)
                    {
                        var interfaceName = @interfaceType.ToString();

                        var symbols = compilation.GetSymbolsWithName(interfaceName);
                        foreach (ITypeSymbol symbol in symbols.Cast<ITypeSymbol>())
                        {
                            var fullNameSpace = symbol.ContainingNamespace.ToDisplayString();
                            //命名空间
                            if (!namespaces.Contains(fullNameSpace))
                            {
                                namespaces.Add(fullNameSpace);
                            }
                            symbol.GetMembers().OfType<IPropertySymbol>().ToList().ForEach(prop =>
                            {
                                //attributes:
                                var attributes = prop.GetAttributes();
                                string rawAttributes = string.Empty;
                                attributes.ToList().ForEach(attr =>
                                {
                                    rawAttributes += $"[{attr}]\r\n";
                                });

                                //prop:
                                var raw = $"public {prop.Type.ToDisplayString()} {prop.Name} {{get;set;}}";
                                //body:
                                bodyInnerBuilder.AppendLine($"/// <inheritdoc cref=\"{interfaceName}.{prop.Name}\" />");
                                bodyInnerBuilder.AppendLine($"{rawAttributes}{raw}");
                            });
                        }
                    }

                    //获取所有父接口
                    List<TypeSyntax> allInterface = [];
                    foreach (var baseType in node.BaseList.Types)
                    {
                        allInterface.Add(baseType.Type);
                        var symbols = compilation.GetSymbolsWithName(baseType.Type.ToString());
                        var symbol = symbols.FirstOrDefault();
                        if (symbol.Kind == SymbolKind.NamedType)
                        {
                            foreach (var item in (symbol as ITypeSymbol)!.AllInterfaces.AsEnumerable())
                            {
                                allInterface.Add(SyntaxFactory.ParseTypeName(item.MetadataName));
                            }
                        }
                    }

                    //所有父接口生成属性:
                    allInterface.ForEach(genProperty);

                    var rawClass = classTemp.Replace("$className", className.Replace("\"", ""));
                    rawClass = rawClass.Replace("$interfaceName", node.Identifier.ToString());
                    rawClass = rawClass.Replace("$body", bodyInnerBuilder.ToString());
                    //append:
                    bodyBuilder.AppendLine(rawClass);

                    string rawNamespace = string.Empty;
                    namespaces.ToList().ForEach(ns => rawNamespace += $"using {ns};\r\n");

                    var source = sb.ToString();
                    source = source.Replace("$namespace", rawNamespace);
                    source = source.Replace("$classes", bodyBuilder.ToString());
                    source = source.Replace("$ni", rootNamespace.Replace("\"", ""));
                    //format:
                    source = FormatContent(source);
                    context.AddSource($"Biwen.AutoClassGen.{className.Replace("\"", "")}.{node.Identifier.Text}.g.cs", SourceText.From(source, Encoding.UTF8));

                }
            }
        }

        /// <summary>
        /// Gen AutoDtoAttribute
        /// </summary>
        /// <param name="compilation"></param>
        /// <param name="nodes"></param>
        /// <param name="context"></param>
        private static void HandleAnnotatedNodesDto(Compilation compilation, ImmutableArray<SyntaxNode> nodes, SourceProductionContext context)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine("// author:vipwan@outlook.com 万雅虎");
            sb.AppendLine("// issue:https://github.com/vipwan/Biwen.AutoClassGen/issues");
            sb.AppendLine("// 如果你在使用中遇到问题,请第一时间issue,谢谢!");
            sb.AppendLine("// This file is generated by Biwen.AutoClassGen.SourceGenerator");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("using System.Text;");
            sb.AppendLine("using System.Threading.Tasks;");

            sb.AppendLine();
            sb.AppendLine("$namespace");
            sb.AppendLine();

            sb.AppendLine("#pragma warning disable");
            sb.AppendLine("namespace $ni");
            sb.AppendLine("{");
            sb.AppendLine("$classes");
            sb.AppendLine("}");
            sb.AppendLine("#pragma warning restore");

            string classTemp = $"public partial class $className  {{ $body }}";

            foreach (ClassDeclarationSyntax node in nodes.AsEnumerable().Cast<ClassDeclarationSyntax>())
            {


                AttributeSyntax? attributeSyntax = null;
                foreach (var attr in node.AttributeLists.AsEnumerable())
                {
                    var attrName = attr.Attributes.FirstOrDefault()?.Name.ToString();
                    if (attrName == AttributeValueMetadataName_Dto)
                    {
                        attributeSyntax = attr.Attributes.First(x => x.Name.ToString() == AttributeValueMetadataName_Dto);
                        break;
                    }
                }
                if (attributeSyntax == null)
                {
                    continue;
                }

                {
                    //转译的Entity类名
                    var entityName = string.Empty;
                    var eType = (attributeSyntax.ArgumentList!.Arguments[0].Expression as TypeOfExpressionSyntax)!.Type;
                    if (eType.IsKind(SyntaxKind.IdentifierName))
                    {
                        entityName = (eType as IdentifierNameSyntax)!.Identifier.ValueText;
                    }
                    else if (eType.IsKind(SyntaxKind.QualifiedName))
                    {
                        entityName = (eType as QualifiedNameSyntax)!.ToString().Split(['.']).Last();
                    }
                    else if (eType.IsKind(SyntaxKind.AliasQualifiedName))
                    {
                        entityName = (eType as AliasQualifiedNameSyntax)!.ToString().Split(['.']).Last();
                    }
                    if (string.IsNullOrEmpty(entityName))
                    {
                        continue;
                    }
                    //排除的属性
                    List<string> Excapes = [];
                    for (var i = 1; i < attributeSyntax.ArgumentList.Arguments.Count; i++)
                    {
                        var expressionSyntax = attributeSyntax.ArgumentList.Arguments[i].Expression;
                        if (expressionSyntax.IsKind(SyntaxKind.InvocationExpression))
                        {
                            var name = (expressionSyntax as InvocationExpressionSyntax)!.ArgumentList.DescendantNodes().First().ToString();
                            Excapes.Add(name.Split(['.']).Last());
                        }
                        else if ((expressionSyntax.IsKind(SyntaxKind.StringLiteralExpression)))
                        {
                            var name = (expressionSyntax as LiteralExpressionSyntax)!.Token.ValueText;
                            Excapes.Add(name);
                        }
                    }

                    var className = node.Identifier.ValueText;
                    var rootNamespace = node.AncestorsAndSelf().OfType<NamespaceDeclarationSyntax>().Single().Name.ToString();

                    StringBuilder bodyBuilder = new();
                    List<string> namespaces = [];
                    StringBuilder bodyInnerBuilder = new();

                    //生成属性
                    void genProperty(TypeSyntax @type)
                    {
                        var symbols = compilation.GetSymbolsWithName(type.ToString());
                        foreach (ITypeSymbol symbol in symbols.Cast<ITypeSymbol>())
                        {
                            var fullNameSpace = symbol.ContainingNamespace.ToDisplayString();
                            //命名空间
                            if (!namespaces.Contains(fullNameSpace))
                            {
                                namespaces.Add(fullNameSpace);
                            }
                            symbol.GetMembers().OfType<IPropertySymbol>().ToList().ForEach(prop =>
                            {
                                if (!Excapes.Contains(prop.Name))
                                {
                                    //prop:
                                    var raw = $"public {prop.Type.ToDisplayString()} {prop.Name} {{get;set;}}";
                                    //body:
                                    bodyInnerBuilder.AppendLine($"/// <inheritdoc cref=\"{@type}.{prop.Name}\" />");
                                    bodyInnerBuilder.AppendLine($"{raw}");
                                }
                            });
                        }
                    }

                    //生成属性:
                    var symbols = compilation.GetSymbolsWithName(entityName, SymbolFilter.Type);
                    var symbol = symbols.Cast<ITypeSymbol>().FirstOrDefault();
                    genProperty(SyntaxFactory.ParseTypeName(symbol.MetadataName));

                    //生成父类的属性:
                    INamedTypeSymbol? baseType = symbol.BaseType;
                    while (baseType != null)
                    {
                        genProperty(SyntaxFactory.ParseTypeName(baseType.MetadataName));
                        baseType = baseType.BaseType;
                    }

                    var rawClass = classTemp.Replace("$className", className);
                    rawClass = rawClass.Replace("$body", bodyInnerBuilder.ToString());
                    //append:
                    bodyBuilder.AppendLine(rawClass);

                    string rawNamespace = string.Empty;
                    namespaces.ToList().ForEach(ns => rawNamespace += $"using {ns};\r\n");

                    var source = sb.ToString();
                    source = source.Replace("$namespace", rawNamespace);
                    source = source.Replace("$classes", bodyBuilder.ToString());
                    source = source.Replace("$ni", rootNamespace);
                    //format:
                    source = FormatContent(source);
                    context.AddSource($"Biwen.AutoClassGenDto.{className}.{node.Identifier.Text}.g.cs", SourceText.From(source, Encoding.UTF8));
                }
            }
        }

        /// <summary>
        /// 格式化代码
        /// </summary>
        /// <param name="csCode"></param>
        /// <returns></returns>
        private static string FormatContent(string csCode)
        {
            var tree = CSharpSyntaxTree.ParseText(csCode);
            var root = tree.GetRoot().NormalizeWhitespace();
            var ret = root.ToFullString();
            return ret;
        }
    }
}