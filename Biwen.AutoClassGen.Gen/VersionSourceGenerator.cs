using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Text;

namespace Biwen.AutoClassGen;

/// <summary>
/// 生成版本信息
/// </summary>
[Generator]
public class VersionSourceGenerator : IIncrementalGenerator
{

    private const string DefaultVersion = "1.0.0";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //build_property.projectdir

        //生成版本号
        var inc = context.AnalyzerConfigOptionsProvider.Select((pvd, _) =>
        {
            var flag = pvd.GlobalOptions.TryGetValue("build_property.projectdir", out var root);
            if (!flag)
                return null;

            //var file = Path.Combine(root, $"*.csproj");
            //查找csproj文件
            var files = Directory.GetFiles(root, "*.csproj", SearchOption.TopDirectoryOnly);

            return files.Length == 0 ? null : files[0];
        });

        //生成
        context.RegisterSourceOutput(inc, (ctx, projectFile) =>
        {
            string version = DefaultVersion;
            string fileVersion = DefaultVersion;
            string assemblyVersion = DefaultVersion;

            // 获取不含扩展名的文件名
            var @namespace = Path.GetFileNameWithoutExtension(projectFile);

            // 读取文件
            var text = File.ReadAllText(projectFile);

            // 载入Import的文件,例如 : <Import Project="..\Version.props" />
            // 使用正则表达式匹配Project:
            var importMatchs = Regex.Matches(text, "<Import Project=\"(.*?)\"");

            foreach (Match importMatch in importMatchs)
            {
                var importFile = Path.Combine(Path.GetDirectoryName(projectFile), importMatch.Groups[1].Value);
                if (File.Exists(importFile))
                {
                    text += File.ReadAllText(importFile);
                }
            }

            var match = Regex.Match(text, "<Version>(.*?)</Version>");
            var fileVersionMatch = Regex.Match(text, "<FileVersion>(.*?)</FileVersion>");
            var assemblyVersionMatch = Regex.Match(text, "<AssemblyVersion>(.*?)</AssemblyVersion>");
            if (match.Success)
            {
                version = match.Groups[1].Value;
            }
            if (fileVersionMatch.Success)
            {
                fileVersion = fileVersionMatch.Groups[1].Value;
            }
            if (assemblyVersionMatch.Success)
            {
                assemblyVersion = assemblyVersionMatch.Groups[1].Value;
            }

            string source = $@"// <auto-generated/>
namespace {@namespace}.Generated
{{
    /// <summary>
    /// The version class
    /// </summary>
    public static class Version
    {{
        /// <summary>
        /// The current version
        /// </summary>
        public static System.Version Current => System.Version.Parse(""{version}"");

        /// <summary>
        /// The file version
        /// </summary>
        public static System.Version FileVersion => System.Version.Parse(""{fileVersion}"");

        /// <summary>
        /// The assembly version
        /// </summary>
        public static System.Version AssemblyVersion => System.Version.Parse(""{assemblyVersion}"");

    }}
}}
";
            // 输出代码
            ctx.AddSource("version.g.cs", SourceText.From(source, Encoding.UTF8));
        });
    }
}