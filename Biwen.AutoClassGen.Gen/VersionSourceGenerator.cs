using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace Biwen.AutoClassGen;

/// <summary>
/// 生成版本信息
/// </summary>
[Generator]
public class VersionSourceGenerator : IIncrementalGenerator
{
    private const string DefaultVersion = "1.0.0";

    private readonly record struct VersionInfo(string? Namespace, string? File);

    #region regex

    private const RegexOptions ROptions = RegexOptions.Compiled | RegexOptions.Singleline;
    private static readonly Regex VersionRegex = new(@"<Version>(.*?)</Version>", ROptions);
    private static readonly Regex FileVersionRegex = new(@"<FileVersion>(.*?)</FileVersion>", ROptions);
    private static readonly Regex AssemblyVersionRegex = new(@"<AssemblyVersion>(.*?)</AssemblyVersion>", ROptions);
    private static readonly Regex ImportRegex = new(@"<Import Project=""(.*?)""", ROptions);

    #endregion


    #region consts

    private const string ODir = "build_property.projectdir";//项目目录
    private const string ONamespace = "build_property.rootnamespace";//命名空间
    private const string ProjExt = ".csproj";//项目文件扩展名
    private const string VarPrefix = "$";//变量前缀

    #endregion


    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        //build_property.projectdir

        //生成版本号
        var inc = context.AnalyzerConfigOptionsProvider.Select((pvd, _) =>
        {
            //取得项目目录
            var flag = pvd.GlobalOptions.TryGetValue(ODir, out var root);
            if (!flag)
                return new VersionInfo(null, null);

            //取得命名空间
            pvd.GlobalOptions.TryGetValue(ONamespace, out var @namespace);

            //查找csproj文件
            var files = Directory.GetFiles(root, $"*{ProjExt}", SearchOption.TopDirectoryOnly);

            return new VersionInfo(@namespace, files.Length == 0 ? null : files[0]);
        });

        //生成
        context.RegisterSourceOutput(inc, (ctx, info) =>
        {
            if (info.Namespace == null || info.File == null)
                return;

            string version = DefaultVersion;
            string fileVersion = DefaultVersion;
            string assemblyVersion = DefaultVersion;

            // 获取不含扩展名的文件名
            //var @namespace = Path.GetFileNameWithoutExtension(info.Item2);

            // 读取文件
            var text = File.ReadAllText(info.File);

            //<Biwen-AutoClassGen>gv=false;ga=false;</Biwen-AutoClassGen>
            //读取配置获取:Biwen-AutoClassGen.gv 如果等于false那么不生成:
            var flagMatch = new Regex(@"<Biwen-AutoClassGen>(.*?)</Biwen-AutoClassGen>", RegexOptions.Singleline).Match(text);

            if (flagMatch.Success)
            {
                var flag = flagMatch.Groups[1].Value;
                if (flag?.ToLower(System.Globalization.CultureInfo.CurrentCulture).Contains("gv=false") is true)
                    return;
            }

            // 载入Import的文件,例如 : <Import Project="..\Version.props" />
            // 使用正则表达式匹配Project:
            var importMatchs = ImportRegex.Matches(text);

            foreach (Match importMatch in importMatchs)
            {
                var importFile = Path.Combine(Path.GetDirectoryName(info.File), importMatch.Groups[1].Value);
                if (File.Exists(importFile))
                {
                    text += File.ReadAllText(importFile);
                }
            }

            var match = VersionRegex.Match(text);
            var fileVersionMatch = FileVersionRegex.Match(text);
            var assemblyVersionMatch = AssemblyVersionRegex.Match(text);

            //存在变量引用的版本号,需要解析
            string RawVersion(string version)
            {
                if (version == null)
                    return DefaultVersion;

                //当取得的版本号为变量引用:$(Version)的时候,需要再次解析
                if (version.StartsWith(VarPrefix, System.StringComparison.Ordinal))
                {
                    var varName = version.Substring(2, version.Length - 3);
                    var varMatch = new Regex($@"<{varName}>(.*?)</{varName}>", RegexOptions.Singleline).Match(text);
                    if (varMatch.Success)
                    {
                        return varMatch.Groups[1].Value;
                    }
                    //未找到变量引用,返回默认版本号
                    return DefaultVersion;
                }
                return version;
            }

            if (match.Success)
            {
                version = RawVersion(match.Groups[1].Value);
            }
            if (fileVersionMatch.Success)
            {
                fileVersion = RawVersion(fileVersionMatch.Groups[1].Value);
            }
            if (assemblyVersionMatch.Success)
            {
                assemblyVersion = RawVersion(assemblyVersionMatch.Groups[1].Value);
            }

            string source = $@"// <auto-generated/>
namespace {info.Namespace}.Generated;

/// <summary>
/// The version class
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCode(""{ThisAssembly.Product}"", ""{ThisAssembly.FileVersion}"")]
public static class Version
{{
    /// <summary>
    /// The current version
    /// </summary>
    public static System.Version Current => System.Version.Parse(""{version}"");

    /// <summary>
    /// The file version
    /// </summary>
    public static System.Version FileVersion => System.Version.Parse(""{fileVersion}"");

    /// <summary>
    /// The assembly version
    /// </summary>
    public static System.Version AssemblyVersion => System.Version.Parse(""{assemblyVersion}"");
}}
";
            // 输出代码
            ctx.AddSource("version.g.cs", SourceText.From(source.FormatContent(), Encoding.UTF8));
        });
    }
}